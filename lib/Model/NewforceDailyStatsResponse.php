<?php
/**
 * NewforceDailyStatsResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  HepRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * HEP REST API
 *
 * The REST API for HEP protocol
 *
 * OpenAPI spec version: v1
 * Contact: xiawu@zeuux.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.6
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace HepRestApi\Model;

use \ArrayAccess;
use \HepRestApi\ObjectSerializer;

/**
 * NewforceDailyStatsResponse Class Doc Comment
 *
 * @category Class
 * @package  HepRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NewforceDailyStatsResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NewforceDailyStatsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'nf_new' => 'string',
        'nf_cny' => 'string',
        'nf_usd' => 'string',
        'gnf' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'nf_new' => null,
        'nf_cny' => null,
        'nf_usd' => null,
        'gnf' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'nf_new' => 'nf_new',
        'nf_cny' => 'nf_cny',
        'nf_usd' => 'nf_usd',
        'gnf' => 'gnf'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'nf_new' => 'setNfNew',
        'nf_cny' => 'setNfCny',
        'nf_usd' => 'setNfUsd',
        'gnf' => 'setGnf'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'nf_new' => 'getNfNew',
        'nf_cny' => 'getNfCny',
        'nf_usd' => 'getNfUsd',
        'gnf' => 'getGnf'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['nf_new'] = isset($data['nf_new']) ? $data['nf_new'] : null;
        $this->container['nf_cny'] = isset($data['nf_cny']) ? $data['nf_cny'] : null;
        $this->container['nf_usd'] = isset($data['nf_usd']) ? $data['nf_usd'] : null;
        $this->container['gnf'] = isset($data['gnf']) ? $data['gnf'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['nf_new'] === null) {
            $invalidProperties[] = "'nf_new' can't be null";
        }
        if ((mb_strlen($this->container['nf_new']) > 256)) {
            $invalidProperties[] = "invalid value for 'nf_new', the character length must be smaller than or equal to 256.";
        }

        if ((mb_strlen($this->container['nf_new']) < 1)) {
            $invalidProperties[] = "invalid value for 'nf_new', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['nf_cny'] === null) {
            $invalidProperties[] = "'nf_cny' can't be null";
        }
        if ((mb_strlen($this->container['nf_cny']) > 64)) {
            $invalidProperties[] = "invalid value for 'nf_cny', the character length must be smaller than or equal to 64.";
        }

        if ((mb_strlen($this->container['nf_cny']) < 1)) {
            $invalidProperties[] = "invalid value for 'nf_cny', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['nf_usd'] === null) {
            $invalidProperties[] = "'nf_usd' can't be null";
        }
        if ((mb_strlen($this->container['nf_usd']) > 64)) {
            $invalidProperties[] = "invalid value for 'nf_usd', the character length must be smaller than or equal to 64.";
        }

        if ((mb_strlen($this->container['nf_usd']) < 1)) {
            $invalidProperties[] = "invalid value for 'nf_usd', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['gnf'] === null) {
            $invalidProperties[] = "'gnf' can't be null";
        }
        if ((mb_strlen($this->container['gnf']) > 64)) {
            $invalidProperties[] = "invalid value for 'gnf', the character length must be smaller than or equal to 64.";
        }

        if ((mb_strlen($this->container['gnf']) < 1)) {
            $invalidProperties[] = "invalid value for 'gnf', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets nf_new
     *
     * @return string
     */
    public function getNfNew()
    {
        return $this->container['nf_new'];
    }

    /**
     * Sets nf_new
     *
     * @param string $nf_new The conversion rate between NewForce(NF) and NEW
     *
     * @return $this
     */
    public function setNfNew($nf_new)
    {
        if ((mb_strlen($nf_new) > 256)) {
            throw new \InvalidArgumentException('invalid length for $nf_new when calling NewforceDailyStatsResponse., must be smaller than or equal to 256.');
        }
        if ((mb_strlen($nf_new) < 1)) {
            throw new \InvalidArgumentException('invalid length for $nf_new when calling NewforceDailyStatsResponse., must be bigger than or equal to 1.');
        }

        $this->container['nf_new'] = $nf_new;

        return $this;
    }

    /**
     * Gets nf_cny
     *
     * @return string
     */
    public function getNfCny()
    {
        return $this->container['nf_cny'];
    }

    /**
     * Sets nf_cny
     *
     * @param string $nf_cny The conversion rate between NewForce(NF) and CNY
     *
     * @return $this
     */
    public function setNfCny($nf_cny)
    {
        if ((mb_strlen($nf_cny) > 64)) {
            throw new \InvalidArgumentException('invalid length for $nf_cny when calling NewforceDailyStatsResponse., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($nf_cny) < 1)) {
            throw new \InvalidArgumentException('invalid length for $nf_cny when calling NewforceDailyStatsResponse., must be bigger than or equal to 1.');
        }

        $this->container['nf_cny'] = $nf_cny;

        return $this;
    }

    /**
     * Gets nf_usd
     *
     * @return string
     */
    public function getNfUsd()
    {
        return $this->container['nf_usd'];
    }

    /**
     * Sets nf_usd
     *
     * @param string $nf_usd The conversion rate between NewForce(NF) and USD
     *
     * @return $this
     */
    public function setNfUsd($nf_usd)
    {
        if ((mb_strlen($nf_usd) > 64)) {
            throw new \InvalidArgumentException('invalid length for $nf_usd when calling NewforceDailyStatsResponse., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($nf_usd) < 1)) {
            throw new \InvalidArgumentException('invalid length for $nf_usd when calling NewforceDailyStatsResponse., must be bigger than or equal to 1.');
        }

        $this->container['nf_usd'] = $nf_usd;

        return $this;
    }

    /**
     * Gets gnf
     *
     * @return string
     */
    public function getGnf()
    {
        return $this->container['gnf'];
    }

    /**
     * Sets gnf
     *
     * @param string $gnf The global NewForce
     *
     * @return $this
     */
    public function setGnf($gnf)
    {
        if ((mb_strlen($gnf) > 64)) {
            throw new \InvalidArgumentException('invalid length for $gnf when calling NewforceDailyStatsResponse., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($gnf) < 1)) {
            throw new \InvalidArgumentException('invalid length for $gnf when calling NewforceDailyStatsResponse., must be bigger than or equal to 1.');
        }

        $this->container['gnf'] = $gnf;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


