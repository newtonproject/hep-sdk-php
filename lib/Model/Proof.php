<?php
/**
 * Proof
 *
 * PHP version 5
 *
 * @category Class
 * @package  HepRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * HEP REST API
 *
 * The REST API for HEP protocol
 *
 * OpenAPI spec version: v1
 * Contact: xiawu@zeuux.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.6
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace HepRestApi\Model;

use \ArrayAccess;
use \HepRestApi\ObjectSerializer;

/**
 * Proof Class Doc Comment
 *
 * @category Class
 * @package  HepRestApi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Proof implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Proof';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'proof_type' => 'string',
        'price_currency' => 'string',
        'total_price' => 'string',
        'submitter' => 'string',
        'orders' => '\HepRestApi\Model\Order[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'proof_type' => null,
        'price_currency' => null,
        'total_price' => null,
        'submitter' => null,
        'orders' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'proof_type' => 'proof_type',
        'price_currency' => 'price_currency',
        'total_price' => 'total_price',
        'submitter' => 'submitter',
        'orders' => 'orders'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'proof_type' => 'setProofType',
        'price_currency' => 'setPriceCurrency',
        'total_price' => 'setTotalPrice',
        'submitter' => 'setSubmitter',
        'orders' => 'setOrders'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'proof_type' => 'getProofType',
        'price_currency' => 'getPriceCurrency',
        'total_price' => 'getTotalPrice',
        'submitter' => 'getSubmitter',
        'orders' => 'getOrders'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['proof_type'] = isset($data['proof_type']) ? $data['proof_type'] : null;
        $this->container['price_currency'] = isset($data['price_currency']) ? $data['price_currency'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['submitter'] = isset($data['submitter']) ? $data['submitter'] : null;
        $this->container['orders'] = isset($data['orders']) ? $data['orders'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['proof_type'] === null) {
            $invalidProperties[] = "'proof_type' can't be null";
        }
        if ((mb_strlen($this->container['proof_type']) > 64)) {
            $invalidProperties[] = "invalid value for 'proof_type', the character length must be smaller than or equal to 64.";
        }

        if ((mb_strlen($this->container['proof_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'proof_type', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['price_currency'] === null) {
            $invalidProperties[] = "'price_currency' can't be null";
        }
        if ((mb_strlen($this->container['price_currency']) > 64)) {
            $invalidProperties[] = "invalid value for 'price_currency', the character length must be smaller than or equal to 64.";
        }

        if ((mb_strlen($this->container['price_currency']) < 1)) {
            $invalidProperties[] = "invalid value for 'price_currency', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['total_price'] === null) {
            $invalidProperties[] = "'total_price' can't be null";
        }
        if ((mb_strlen($this->container['total_price']) > 64)) {
            $invalidProperties[] = "invalid value for 'total_price', the character length must be smaller than or equal to 64.";
        }

        if ((mb_strlen($this->container['total_price']) < 1)) {
            $invalidProperties[] = "invalid value for 'total_price', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['submitter'] === null) {
            $invalidProperties[] = "'submitter' can't be null";
        }
        if ((mb_strlen($this->container['submitter']) > 64)) {
            $invalidProperties[] = "invalid value for 'submitter', the character length must be smaller than or equal to 64.";
        }

        if ((mb_strlen($this->container['submitter']) < 1)) {
            $invalidProperties[] = "invalid value for 'submitter', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['orders'] === null) {
            $invalidProperties[] = "'orders' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets proof_type
     *
     * @return string
     */
    public function getProofType()
    {
        return $this->container['proof_type'];
    }

    /**
     * Sets proof_type
     *
     * @param string $proof_type The proof type which value is 'order'.
     *
     * @return $this
     */
    public function setProofType($proof_type)
    {
        if ((mb_strlen($proof_type) > 64)) {
            throw new \InvalidArgumentException('invalid length for $proof_type when calling Proof., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($proof_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $proof_type when calling Proof., must be bigger than or equal to 1.');
        }

        $this->container['proof_type'] = $proof_type;

        return $this;
    }

    /**
     * Gets price_currency
     *
     * @return string
     */
    public function getPriceCurrency()
    {
        return $this->container['price_currency'];
    }

    /**
     * Sets price_currency
     *
     * @param string $price_currency The symbol of fiat or digital token, such as USD, RMB, NEW,BTC,ETH.
     *
     * @return $this
     */
    public function setPriceCurrency($price_currency)
    {
        if ((mb_strlen($price_currency) > 64)) {
            throw new \InvalidArgumentException('invalid length for $price_currency when calling Proof., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($price_currency) < 1)) {
            throw new \InvalidArgumentException('invalid length for $price_currency when calling Proof., must be bigger than or equal to 1.');
        }

        $this->container['price_currency'] = $price_currency;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return string
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param string $total_price The amount of fiat or digital token, unit is the minimum unit of given fiat or digital token.
     *
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        if ((mb_strlen($total_price) > 64)) {
            throw new \InvalidArgumentException('invalid length for $total_price when calling Proof., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($total_price) < 1)) {
            throw new \InvalidArgumentException('invalid length for $total_price when calling Proof., must be bigger than or equal to 1.');
        }

        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets submitter
     *
     * @return string
     */
    public function getSubmitter()
    {
        return $this->container['submitter'];
    }

    /**
     * Sets submitter
     *
     * @param string $submitter The submitter's NewID
     *
     * @return $this
     */
    public function setSubmitter($submitter)
    {
        if ((mb_strlen($submitter) > 64)) {
            throw new \InvalidArgumentException('invalid length for $submitter when calling Proof., must be smaller than or equal to 64.');
        }
        if ((mb_strlen($submitter) < 1)) {
            throw new \InvalidArgumentException('invalid length for $submitter when calling Proof., must be bigger than or equal to 1.');
        }

        $this->container['submitter'] = $submitter;

        return $this;
    }

    /**
     * Gets orders
     *
     * @return \HepRestApi\Model\Order[]
     */
    public function getOrders()
    {
        return $this->container['orders'];
    }

    /**
     * Sets orders
     *
     * @param \HepRestApi\Model\Order[] $orders orders
     *
     * @return $this
     */
    public function setOrders($orders)
    {
        $this->container['orders'] = $orders;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


